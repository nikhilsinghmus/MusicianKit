{"Structs/RomanNumeral/Berklee.html#/s:11MusicianKit12RomanNumeralV7BerkleeV7offsetsSaySiGv":{"name":"offsets","abstract":"<p>Offsets-from-tonic for the current instance (values can be &gt; 12).</p>","parent_name":"Berklee"},"Structs/RomanNumeral/Berklee.html#/s:11MusicianKit12RomanNumeralV7BerkleeV5pcsetAA5PCSetVv":{"name":"pcset","abstract":"<p>Offsets-from-tonic as a pitch-class set (may negate inversion).</p>","parent_name":"Berklee"},"Structs/RomanNumeral/Berklee.html#/s:11MusicianKit12RomanNumeralV7BerkleeVAESgSScfc":{"name":"init(_:)","abstract":"<p>Initialize from a string containing a roman numeral symbol. E.g. RomanNumeral.Berklee(<q>Imaj7#9</q>)</p>","parent_name":"Berklee"},"Structs/RomanNumeral/Berklee.html#/s:11MusicianKit12RomanNumeralV7BerkleeV5mapRNSSSgSSF":{"name":"mapRN(_:)","abstract":"<p>Helper function to map the roman numeral portion of the symbol to an initial offset value.</p>","parent_name":"Berklee"},"Structs/RomanNumeral/Berklee.html#/s:11MusicianKit12RomanNumeralV7BerkleeV12pitchClassesAA5PCSetVSgAA11PitchLetterO2in_tF":{"name":"pitchClasses(in:)","abstract":"<p>Returns a pitch-class set corresponding to the current roman numeral instance, as it applies to the specified key (may negate inversion).</p>","parent_name":"Berklee"},"Structs/RomanNumeral/Berklee.html#/s:11MusicianKit12RomanNumeralV7BerkleeV6toMIDISays5UInt8VGAH10bassOctave_tF":{"name":"toMIDI(bassOctave:)","abstract":"<p>Map a roman numeral&rsquo;s offsets to a particular key and octave, in the style of MIDI note numbers.</p>","parent_name":"Berklee"},"Structs/RomanNumeral/Traditional.html#/s:11MusicianKit12RomanNumeralV11TraditionalV7optionsSaySSGvZ":{"name":"options","abstract":"<p>All available roman numeral strings as an array of strings.</p>","parent_name":"Traditional"},"Structs/RomanNumeral/Traditional.html#/s:11MusicianKit12RomanNumeralV11TraditionalV7offsetsSaySiGv":{"name":"offsets","abstract":"<p>Offsets-from-tonic for the current instance (values can be &gt; 12).</p>","parent_name":"Traditional"},"Structs/RomanNumeral/Traditional.html#/s:11MusicianKit12RomanNumeralV11TraditionalV5pcsetAA5PCSetVv":{"name":"pcset","abstract":"<p>Offsets-from-tonic as a pitch-class set (may negate inversion).</p>","parent_name":"Traditional"},"Structs/RomanNumeral/Traditional.html#/s:11MusicianKit12RomanNumeralV11TraditionalVAESgSScfc":{"name":"init(_:)","abstract":"<p>Initialize from a string containing a roman numeral symbol. E.g. RomanNumeral.Traditional(<q>viiÂº7</q>)</p>","parent_name":"Traditional"},"Structs/RomanNumeral/Traditional.html#/s:11MusicianKit12RomanNumeralV11TraditionalV6toMIDISays5UInt8VGAA11PitchLetterO2in_AH10bassOctavetF":{"name":"toMIDI(in:bassOctave:)","abstract":"<p>Map a roman numeral&rsquo;s offsets to a particular key and octave, in the style of MIDI note numbers.</p>","parent_name":"Traditional"},"Structs/RomanNumeral/Traditional.html#/s:11MusicianKit12RomanNumeralV11TraditionalV7offsetsSaySiGAA11PitchLetterO2in_tF":{"name":"offsets(in:)","abstract":"<p>Map a roman numeral&rsquo;s offsets to a particular key.</p>","parent_name":"Traditional"},"Structs/RomanNumeral/Traditional.html#/s:11MusicianKit12RomanNumeralV11TraditionalV2ofSaySiGAE_AA11PitchLetterO2intF":{"name":"of(_:in:)","abstract":"<p>Map a secondary function. E.g. RomanNumeral.Traditional(<q>iv</q>).of(RomanNumeral.Traditional(<q>III</q>), in: .C).</p>","parent_name":"Traditional"},"Structs/RomanNumeral/Traditional.html":{"name":"Traditional","abstract":"<p>The <strong>Traditional</strong> roman numeral type uses figured-bass notation and both upper and lower case characters. Examples:</p>","parent_name":"RomanNumeral"},"Structs/RomanNumeral/Berklee.html":{"name":"Berklee","abstract":"<p>The <strong>Berklee</strong> roman numeral type uses chord-symbol style notation and only upper case characters, as is used in the system of harmony taught to undergraduates in the Berkee College of Music&rsquo;s core jazz-based harmony courses. Examples:</p>","parent_name":"RomanNumeral"},"Structs/Tempo.html#/s:11MusicianKit5TempoV9softLimitSdvZ":{"name":"softLimit","abstract":"<p>An internal soft limit that can be modified. Defaults to 400.0.</p>","parent_name":"Tempo"},"Structs/Tempo.html#/s:11MusicianKit5TempoV3BPMSdv":{"name":"BPM","abstract":"<p>The number of beats per minute.</p>","parent_name":"Tempo"},"Structs/Tempo.html#/s:11MusicianKit5TempoV5valueAA9NoteValueOv":{"name":"value","abstract":"<p>The value of each beat.</p>","parent_name":"Tempo"},"Structs/Tempo.html#/s:11MusicianKit5TempoVAcA9NoteValueO_Sdtcfc":{"name":"init(_:_:)","abstract":"<p>Initialize with a note value and a BPM value, e.g. Tempo(.d_4, 140).</p>","parent_name":"Tempo"},"Structs/Tempo.html#/s:11MusicianKit5TempoVACSdcfc":{"name":"init(_:)","abstract":"<p>Initialize with a BPM value alone, e.g. Tempo(116.5). Beat value defaults to .n_4, or a quarter-note.</p>","parent_name":"Tempo"},"Structs/Tempo.html#/s:11MusicianKit5TempoVACSgSS11description_tcfc":{"name":"init(description:)","abstract":"<p>Initialize from a string describing the tempo, e.g. Tempo(<q>Presto</q>). Generates a random value within a range (e.g. 115 - 140 for <q>Allegro</q>).</p>","parent_name":"Tempo"},"Structs/TimeSignature.html#/s:11MusicianKit13TimeSignatureV9numerators5UInt8Vv":{"name":"numerator","abstract":"<p>The underlying numerator.</p>","parent_name":"TimeSignature"},"Structs/TimeSignature.html#/s:11MusicianKit13TimeSignatureV11denominators5UInt8Vv":{"name":"denominator","abstract":"<p>The underlying denominator.</p>","parent_name":"TimeSignature"},"Structs/TimeSignature.html#/s:11MusicianKit13TimeSignatureVACSgycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"TimeSignature"},"Structs/TimeSignature.html#/s:11MusicianKit13TimeSignatureVACSgs5UInt8V_AFtcfc":{"name":"init(_:_:)","abstract":"<p>Initialize from a numerator and a denominator, e.g. TimeSignature(4, 4).</p>","parent_name":"TimeSignature"},"Structs/SeparatedChordSymbol.html#/s:11MusicianKit20SeparatedChordSymbolVAcA11PitchLetterO_SStcfc":{"name":"init(_:_:)","abstract":"<p>Initialize with a chord root and a chord suffix string, without argument labels.</p>","parent_name":"SeparatedChordSymbol"},"Structs/SeparatedChordSymbol.html#/s:11MusicianKit20SeparatedChordSymbolV12pitchClassesAA5PCSetVSgyF":{"name":"pitchClasses()","abstract":"<p>Get a pitch-class set of the suffix as it would apply to C (pitch-class 0).</p>","parent_name":"SeparatedChordSymbol"},"Structs/Chord.html#/s:11MusicianKit5ChordV12pitchClassesAA5PCSetVv":{"name":"pitchClasses","abstract":"<p>The underlying pitch-class set.</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordV3keyAA11PitchLetterO_AA7KeyTypeOtv":{"name":"key","abstract":"<p>The chord&rsquo;s key context, useful for certain operations. Defaults to C Major. Expressed as a tuplet (Key, KeyType).</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordV5tonesSaySiGv":{"name":"tones","abstract":"<p>The chord represented as scale degrees, if available, according to the &lsquo;key&rsquo; property.</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordV2eeoiSbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Check chord parity.</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordVACSaySiG12scaleDegrees_AA11PitchLetterO_AA7KeyTypeOt2intcfc":{"name":"init(scaleDegrees:in:)","abstract":"<p>Initialize with scale degrees.</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordVAcA5PCSetV13pitchClassSet_tcfc":{"name":"init(pitchClassSet:)","abstract":"<p>Initialize from a pitch-class set.</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordVACSgSScfc":{"name":"init(_:)","abstract":"<p>Initialize from a chord symbol. E.g. Chord(<q>Gbm7</q>).</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordVACSgSS5parse_tcfc":{"name":"init(parse:)","abstract":"<p>Parse a chord symbol and return an Optional<Chord>. Returns nil if the chord symbol could not be parsed.</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordV13toScaleDegreeSiSgSi4from_tF":{"name":"toScaleDegree(from:)","abstract":"<p>Convert from pitch-class to scale-degree.</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordV12toPitchClassS2i4from_tF":{"name":"toPitchClass(from:)","abstract":"<p>Convert from scale-degree to pitch-class.</p>","parent_name":"Chord"},"Structs/Chord.html#/s:11MusicianKit5ChordV9voiceLeadSays5UInt8VGAG4from_AC2totFZ":{"name":"voiceLead(from:to:)","abstract":"<p>Use the <strong>Chord</strong> abstraction to voice-lead from one set of MIDI note numbers to another. E.g. Chord.voiceLead(from: [60, 64, 67], to: Chord(<q>Fmaj7</q>)).</p>","parent_name":"Chord"},"Structs/ToneMatrix.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"ToneMatrix"},"Structs/ToneMatrix.html#/s:11MusicianKit10ToneMatrixV4rowsSQySayAA0C3RowVGGv":{"name":"rows","abstract":"<p>The underlying array of ToneRows.</p>","parent_name":"ToneMatrix"},"Structs/ToneMatrix.html#/s:s25ExpressibleByArrayLiteralPxSay0cD7ElementQzG05arrayD0d_tcfc":{"name":"init(arrayLiteral:)","parent_name":"ToneMatrix"},"Structs/ToneMatrix.html#/s:11MusicianKit10ToneMatrixVAcA0C3RowV4from_tcfc":{"name":"init(from:)","abstract":"<p>Initialize from a ToneRow instance.</p>","parent_name":"ToneMatrix"},"Structs/ToneMatrix.html#/s:s17_MutableIndexableP5index5IndexQzAE5after_tF":{"name":"index(after:)","parent_name":"ToneMatrix"},"Structs/ToneMatrix.html#/s:s17_MutableIndexableP10startIndex0D0Qzv":{"name":"startIndex","parent_name":"ToneMatrix"},"Structs/ToneMatrix.html#/s:s17_MutableIndexableP8endIndex0D0Qzv":{"name":"endIndex","parent_name":"ToneMatrix"},"Structs/ToneMatrix.html#/s:11MusicianKit10ToneMatrixV7rowFormAA0C3RowVAA0dF0O_Si6offsettF":{"name":"rowForm(_:offset:)","abstract":"<p>Get a prticular row form from the matrix.</p>","parent_name":"ToneMatrix"},"Structs/ToneMatrix.html#/s:11MusicianKit10ToneMatrixV12rowFormNon12AA0C3RowVAA0dF0O_Si6offsetSi_Sit2edtF":{"name":"rowFormNon12(_:offset:ed:)","abstract":"<p>Get a prticular row form from the matrix in an arbitrary equal division of the octave/diapason.</p>","parent_name":"ToneMatrix"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV12pitchClassesSaySiGv":{"name":"pitchClasses","abstract":"<p>Underlying PitchClass array.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetVACycfc":{"name":"init()","abstract":"<p>Initialize an empty pitch-class set.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetVACs3SetVySiGcfc":{"name":"init(_:)","abstract":"<p>Initialize from a Set of PitchClasses.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetVACSays5UInt8VG4with_tcfc":{"name":"init(with:)","abstract":"<p>Initialize from an array of MIDI note numbers.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetVACSaySiG12arrayLiterald_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Initialize as an array literal of PitchClasses. For example:</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetVACSaySiGcfc":{"name":"init(_:)","abstract":"<p>Initialize from an Array of PitchClasses.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetVACs10ArraySliceVySiGcfc":{"name":"init(_:)","abstract":"<p>Initialize from an ArraySlice of PitchClasses.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetVACSgSScfc":{"name":"init(_:)","abstract":"<p>Initialize from a Forte code string. E.g. PCSet(<q>4-Z15</q>) returns [0, 1, 4, 6]</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV11cardinalitySiv":{"name":"cardinality","abstract":"<p>Returns the number of unique elements in the current PCSet instance.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:s14_IndexableBaseP5index5IndexQzAE5after_tF":{"name":"index(after:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s14_IndexableBaseP10startIndex0D0Qzv":{"name":"startIndex","parent_name":"PCSet"},"Structs/PCSet.html#/s:s14_IndexableBaseP8endIndex0D0Qzv":{"name":"endIndex","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP5unionxxF":{"name":"union(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP12intersectionxxF":{"name":"intersection(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP19symmetricDifferencexxF":{"name":"symmetricDifference(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP9formUnionyxF":{"name":"formUnion(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP16formIntersectionyxF":{"name":"formIntersection(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP23formSymmetricDifferenceyxF":{"name":"formSymmetricDifference(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP6insertSb8inserted_7ElementQz17memberAfterInserttAFF":{"name":"insert(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP6remove7ElementQzSgAEF":{"name":"remove(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10CollectionP7isEmptySbv":{"name":"isEmpty","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP8containsSb7ElementQzF":{"name":"contains(_:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:s10SetAlgebraP6update7ElementQzSgAE4with_tF":{"name":"update(with:)","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV7thinnedACyF":{"name":"thinned()","abstract":"<p>Returns an ordered replica of the current PCSet with duplicates removed.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV9forteCodeSSSgv":{"name":"forteCode","abstract":"<p>Returns the Forte code of the current PCSet if one can be found that matches.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV10normalFormACyF":{"name":"normalForm()","abstract":"<p>Returns the normal form of the current PCSet.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV9primeFormACyF":{"name":"primeForm()","abstract":"<p>Returns the prime form of the current PCSet.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV8invertedACyF":{"name":"inverted()","abstract":"<p>Returns an inversion of the current PCSet.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV6invertyyF":{"name":"invert()","abstract":"<p>Inverts the current PCSet.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV10transposedACSiF":{"name":"transposed(_:)","abstract":"<p>Returns a transposition of the current PCSet.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV9transposeySiF":{"name":"transpose(_:)","abstract":"<p>Transposes the current PCSet.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV11transformedACSi1t_Sb1itF":{"name":"transformed(t:i:)","abstract":"<p>Returns a transposition and/or inversion of the current PCSet.</p>","parent_name":"PCSet"},"Structs/PCSet.html#/s:11MusicianKit5PCSetV9transformySi1t_Sb1itF":{"name":"transform(t:i:)","abstract":"<p>Performs a compound transformation (inversion and transposition) on the current PCSet.</p>","parent_name":"PCSet"},"Structs/ToneRow.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"ToneRow"},"Structs/ToneRow.html#/s:s25ExpressibleByArrayLiteralPxSay0cD7ElementQzG05arrayD0d_tcfc":{"name":"init(arrayLiteral:)","parent_name":"ToneRow"},"Structs/ToneRow.html#/s:11MusicianKit7ToneRowVAcA5PCSetVcfc":{"name":"init(_:)","abstract":"<p>Initialize from a PCSet.</p>","parent_name":"ToneRow"},"Structs/ToneRow.html#/s:11MusicianKit7ToneRowVACSaySiGcfc":{"name":"init(_:)","abstract":"<p>Initialize from an array of PitchClasses.</p>","parent_name":"ToneRow"},"Structs/ToneRow.html#/s:s17_MutableIndexableP10startIndex0D0Qzv":{"name":"startIndex","parent_name":"ToneRow"},"Structs/ToneRow.html#/s:s17_MutableIndexableP8endIndex0D0Qzv":{"name":"endIndex","parent_name":"ToneRow"},"Structs/ToneRow.html#/s:s17_MutableIndexableP5index5IndexQzAE5after_tF":{"name":"index(after:)","parent_name":"ToneRow"},"Structs/ToneRow.html#/s:11MusicianKit7ToneRowV11buildMatrixAA0cF0VyF":{"name":"buildMatrix()","abstract":"<p>Generate a ToneMatrix from the current ToneRow.</p>","parent_name":"ToneRow"},"Structs/NoteSequence.html#/s:11MusicianKit12NoteSequenceV5notesSayAA0C0VGv":{"name":"notes","abstract":"<p>The underlying array of <strong>Note</strong> objects.</p>","parent_name":"NoteSequence"},"Structs/NoteSequence.html#/s:11MusicianKit12NoteSequenceVACSayAA0C0VG12arrayLiterald_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Variadic initializer from Note objects.</p>","parent_name":"NoteSequence"},"Structs/NoteSequence.html#/s:11MusicianKit12NoteSequenceVAcA8DurationC8duration_s5UInt8V8velocitySayAA5PitchVG7pitchestcfc":{"name":"init(duration:velocity:pitches:)","abstract":"<p>Initialize from a single duration and single velocity applied to multiple pitches.</p>","parent_name":"NoteSequence"},"Structs/NoteSequence.html#/s:11MusicianKit12NoteSequenceVACSayAA8DurationCG9durations_Says5UInt8VG10velocitiesSayAA5PitchVG7pitchestcfc":{"name":"init(durations:velocities:pitches:)","abstract":"<p>Initialize from a single duration and single velocity applied to multiple pitches.</p>","parent_name":"NoteSequence"},"Structs/NoteSequence.html#/s:11MusicianKit12NoteSequenceV07toMusicD0s13OpaquePointerVSgs5UInt8V2on_tF":{"name":"toMusicSequence(on:)","abstract":"<p>Export NoteSequence instance as a <strong>MusicSequence</strong> object. Needs testing.</p>","parent_name":"NoteSequence"},"Structs/Note.html#/s:11MusicianKit4NoteV5pitchAA5PitchVv":{"name":"pitch","abstract":"<p>The underlying absolute pitch.</p>","parent_name":"Note"},"Structs/Note.html#/s:11MusicianKit4NoteV8durationAA8DurationCv":{"name":"duration","abstract":"<p>The underlying duration.</p>","parent_name":"Note"},"Structs/Note.html#/s:11MusicianKit4NoteV8velocitys5UInt8Vv":{"name":"velocity","abstract":"<p>The underlying velocity.</p>","parent_name":"Note"},"Structs/Note.html#/s:11MusicianKit4NoteVAcA5PitchV_AA8DurationCs5UInt8Vtcfc":{"name":"init(_:_:_:)","abstract":"<p>Initialize from initial pitch, duration, and velocity values.</p>","parent_name":"Note"},"Structs/Note.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"Note"},"Structs/Pitch.html#/s:11MusicianKit5PitchV2pcSiv":{"name":"pc","abstract":"<p>The underlying pitch class.</p>","parent_name":"Pitch"},"Structs/Pitch.html#/s:11MusicianKit5PitchV3octSiv":{"name":"oct","abstract":"<p>The underlying octave.</p>","parent_name":"Pitch"},"Structs/Pitch.html#/s:11MusicianKit5PitchV9midiValues5UInt8Vv":{"name":"midiValue","abstract":"<p>A MIDI note number representation, for practical purposes.</p>","parent_name":"Pitch"},"Structs/Pitch.html#/s:11MusicianKit5PitchVACSi_Sitcfc":{"name":"init(_:_:)","abstract":"<p>Initialize from a PitchClass and an integer denoting octave.</p>","parent_name":"Pitch"},"Structs/Pitch.html#/s:11MusicianKit5PitchVAcA0C6LetterO_Sitcfc":{"name":"init(_:_:)","abstract":"<p>Initialize from a PitchLetter and an integer denoting octave.</p>","parent_name":"Pitch"},"Structs/Pitch.html#/s:11MusicianKit5PitchVACs5UInt8Vcfc":{"name":"init(_:)","abstract":"<p>Initialize from a MIDI note number.</p>","parent_name":"Pitch"},"Structs/Pitch.html#/s:11MusicianKit5PitchVACSgSScfc":{"name":"init(_:)","abstract":"<p>Initialize from a description string, e.g. Pitch(<q>Eb5</q>).</p>","parent_name":"Pitch"},"Structs/Pitch.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"Pitch"},"Structs/Pitch.html#/s:11MusicianKit5PitchV2teoiSbAC_ACtFZ":{"name":"~=(_:_:)","abstract":"<p>Undocumented</p>","parent_name":"Pitch"},"Structs/Mode.html#/s:11MusicianKit4ModeV4nameSSv":{"name":"name","abstract":"<p>Custom mode/scale name.</p>","parent_name":"Mode"},"Structs/Mode.html#/s:11MusicianKit4ModeV7offsetsSaySiGv":{"name":"offsets","abstract":"<p>Custom mode/scale offsets-from-tonic.</p>","parent_name":"Mode"},"Structs/Mode.html#/s:11MusicianKit4ModeVACSS8modeName_SaySiG0D7Offsetstcfc":{"name":"init(modeName:modeOffsets:)","abstract":"<p>Initialize from a name string and offsets-from-tonic Int array.</p>","parent_name":"Mode"},"Structs/Mode.html#/s:11MusicianKit4ModeVACSS8modeName_AA5PCSetV5pcsettcfc":{"name":"init(modeName:pcset:)","abstract":"<p>Initialize from a name string and a pitch-class set (the prime form of which is used).</p>","parent_name":"Mode"},"Structs/Mode.html#/s:11MusicianKit4ModeV03getC0SaySiGs5UInt8VF":{"name":"getMode(_:)","abstract":"<p>Get a mode of a <strong>Mode</strong> parent scale instance.</p>","parent_name":"Mode"},"Structs/Mode.html":{"name":"Mode","abstract":"<p>The <strong>Mode</strong> type is used for defining custom scale structures. Initialized with either a name string and an array of Int offsets-from-tonic, or with a name string and a pitch-class set (in which case the prime form is used).</p>"},"Structs/Pitch.html":{"name":"Pitch","abstract":"<p>The <strong>Pitch</strong> type represents both a pitch class and an octave. It also contains a MIDI note number representation. Absolute pitch parity can be checked with ==, pitch class parity can be checked with ~=.</p>"},"Structs/Note.html":{"name":"Note","abstract":"<p>The <strong>Note</strong> abstraction contains a Pitch instance, a Duration instance, and a velocity.</p>"},"Structs/NoteSequence.html":{"name":"NoteSequence","abstract":"<p>The <strong>NoteSequence</strong> abstraction represents an ordered collection of <strong>Note</strong> objects.</p>"},"Structs/ToneRow.html":{"name":"ToneRow","abstract":"<p>The <strong>ToneRow</strong> type deals with ordered collections of pitch-classes and adds utility methods for working with tone rows in compositional contexts.</p>"},"Structs/PCSet.html":{"name":"PCSet","abstract":"<p>The <strong>PCSet</strong> type deals with collections of pitch-classes. It abstracts an Array of pitch-classes than a set type, in order to allow for duplicates, explicit ordering, etc.</p>"},"Structs/ToneMatrix.html":{"name":"ToneMatrix","abstract":"<p>The <strong>ToneMatrix</strong> type deals with tone matrices expressed as multidimensional arrays, or arrays of ToneRow instances.</p>"},"Structs/Chord.html":{"name":"Chord","abstract":"<p>The <strong>Chord</strong> type provides an abstraction for dealing with vertically-oriented harmonic structures. Can be initialized with a pitch-class set, with a chord symbol (e.g. Chord(<q>Fmaj7#11</q>)), or with MIDI note numbers as an Int array. Chord parity, considering inversional equivalence, can be checked using the == operator.</p>"},"Structs/SeparatedChordSymbol.html":{"name":"SeparatedChordSymbol","abstract":"<p>The <strong>SeparatedChordSymbol</strong> type provides a separated root and symbol suffix, as an intermediary stage in the chord-parsing process.</p>"},"Structs/TimeSignature.html":{"name":"TimeSignature","abstract":"<p>The <strong>TimeSignature</strong> type consists of a numerator and a denominator, together representing a time signature. It currently only supports dyadic rationals, but support for &lsquo;irrational&rsquo; time signatures is planned.</p>"},"Structs/Tempo.html":{"name":"Tempo","abstract":"<p>The <strong>Tempo</strong> type consists of a beats-per-minute value, and a NoteValue instance to indicate what each of these beats is. It can be initialized with a BPM value alone, in which case the beat&rsquo;s value defaults to a quarter note, or with both together. Additionally, it can be initialized with a description, e.g. Tempo(<q>Andante</q>). There is an internal soft limit that defaults to 400.0 and can be user-modified.</p>"},"Structs/RomanNumeral.html":{"name":"RomanNumeral","abstract":"<p>The <strong>RomanNumeral</strong> type abstracts data and operations related to working with roman-numeral expressions of harmony. Two basic systems of roman-numerals are provided: &lsquo;Traditional&rsquo; and &lsquo;Berklee&rsquo;, the former employing figured-bass notation and both upper and lower case characters, and the latter resembling chord symbols and using all upper case characters.</p>"},"Functions.html#/s:11MusicianKit3ggsoiq_SgxSg_ACxctr0_lF":{"name":">>-(_:_:)","abstract":"<p>Undocumented</p>"},"Extensions/String.html#/s:SS11MusicianKitE12separateRootAA20SeparatedChordSymbolVSgyF":{"name":"separateRoot()","abstract":"<p>Separate a chord symbol&rsquo;s root from its suffix in a string and return both in a SeparatedChordSymbol instance.</p>","parent_name":"String"},"Extensions/String.html#/s:SS11MusicianKitE8mapPitchSiSgyF":{"name":"mapPitch()","abstract":"<p>Map a string containing a pitch-letter to a pitch-class.</p>","parent_name":"String"},"Extensions/String.html#/s:SS11MusicianKitE16mapPitchToLetterAA0dF0OSgyF":{"name":"mapPitchToLetter()","abstract":"<p>Map a string containing a pitch-letter to a PitchLetter instance.</p>","parent_name":"String"},"Extensions/String.html#/s:SS11MusicianKitE9mapSuffixAA5PCSetVSgyF":{"name":"mapSuffix()","abstract":"<p>Parse a chord symbol&rsquo;s suffix and get a pitch-class set from it as it would apply to C (pitch-class 0). E.g. <q>m7</q>.mapSuffix().</p>","parent_name":"String"},"Extensions/String.html#/s:SS11MusicianKitE9substringSSSi_SitF":{"name":"substring(_:_:)","abstract":"<p>Helper function to get substrings using a JavaScript-like interface.</p>","parent_name":"String"},"Extensions/String.html":{"name":"String","abstract":"<p>Extensions to the String type to enable parsing chord symbols in a functional style.</p>"},"Enums/ChordQuality.html#/s:11MusicianKit12ChordQualityO5majorA2CmF":{"name":"major","abstract":"<p>Undocumented</p>","parent_name":"ChordQuality"},"Enums/ChordQuality.html#/s:11MusicianKit12ChordQualityO5minorA2CmF":{"name":"minor","abstract":"<p>Undocumented</p>","parent_name":"ChordQuality"},"Enums/ChordQuality.html#/s:11MusicianKit12ChordQualityO10diminishedA2CmF":{"name":"diminished","abstract":"<p>Undocumented</p>","parent_name":"ChordQuality"},"Enums/ChordQuality.html#/s:11MusicianKit12ChordQualityO9augmentedA2CmF":{"name":"augmented","abstract":"<p>Undocumented</p>","parent_name":"ChordQuality"},"Enums/Transformation.html#/s:11MusicianKit14TransformationO1PA2CmF":{"name":"P","abstract":"<p>Undocumented</p>","parent_name":"Transformation"},"Enums/Transformation.html#/s:11MusicianKit14TransformationO1RA2CmF":{"name":"R","abstract":"<p>Undocumented</p>","parent_name":"Transformation"},"Enums/Transformation.html#/s:11MusicianKit14TransformationO1LA2CmF":{"name":"L","abstract":"<p>Undocumented</p>","parent_name":"Transformation"},"Enums/Transformation.html#/s:11MusicianKit14TransformationO1NA2CmF":{"name":"N","abstract":"<p>Undocumented</p>","parent_name":"Transformation"},"Enums/Transformation.html#/s:11MusicianKit14TransformationO1SA2CmF":{"name":"S","abstract":"<p>Undocumented</p>","parent_name":"Transformation"},"Enums/Transformation.html#/s:11MusicianKit14TransformationO1HA2CmF":{"name":"H","abstract":"<p>Undocumented</p>","parent_name":"Transformation"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3n_1A2CmF":{"name":"n_1","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3n_2A2CmF":{"name":"n_2","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3n_4A2CmF":{"name":"n_4","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3n_8A2CmF":{"name":"n_8","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4n_16A2CmF":{"name":"n_16","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4n_32A2CmF":{"name":"n_32","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4n_64A2CmF":{"name":"n_64","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO5n_128A2CmF":{"name":"n_128","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3t_1A2CmF":{"name":"t_1","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3t_2A2CmF":{"name":"t_2","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3t_4A2CmF":{"name":"t_4","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3t_8A2CmF":{"name":"t_8","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4t_16A2CmF":{"name":"t_16","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4t_32A2CmF":{"name":"t_32","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4t_64A2CmF":{"name":"t_64","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO5t_128A2CmF":{"name":"t_128","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3d_1A2CmF":{"name":"d_1","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3d_2A2CmF":{"name":"d_2","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3d_4A2CmF":{"name":"d_4","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO3d_8A2CmF":{"name":"d_8","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4d_16A2CmF":{"name":"d_16","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4d_32A2CmF":{"name":"d_32","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO4d_64A2CmF":{"name":"d_64","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/NoteValue.html#/s:11MusicianKit9NoteValueO5d_128A2CmF":{"name":"d_128","abstract":"<p>Undocumented</p>","parent_name":"NoteValue"},"Enums/MatrixForm.html#/s:11MusicianKit10MatrixFormO1pA2CmF":{"name":"p","abstract":"<p>Undocumented</p>","parent_name":"MatrixForm"},"Enums/MatrixForm.html#/s:11MusicianKit10MatrixFormO1iA2CmF":{"name":"i","abstract":"<p>Undocumented</p>","parent_name":"MatrixForm"},"Enums/MatrixForm.html#/s:11MusicianKit10MatrixFormO1rA2CmF":{"name":"r","abstract":"<p>Undocumented</p>","parent_name":"MatrixForm"},"Enums/MatrixForm.html#/s:11MusicianKit10MatrixFormO2riA2CmF":{"name":"ri","abstract":"<p>Undocumented</p>","parent_name":"MatrixForm"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO1CA2CmF":{"name":"C","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2BsA2CmF":{"name":"Bs","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3DbbA2CmF":{"name":"Dbb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2DbA2CmF":{"name":"Db","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2CsA2CmF":{"name":"Cs","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2BxA2CmF":{"name":"Bx","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO1DA2CmF":{"name":"D","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2CxA2CmF":{"name":"Cx","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3EbbA2CmF":{"name":"Ebb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2EbA2CmF":{"name":"Eb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2DsA2CmF":{"name":"Ds","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3CsxA2CmF":{"name":"Csx","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO1EA2CmF":{"name":"E","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2DxA2CmF":{"name":"Dx","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2FbA2CmF":{"name":"Fb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO1FA2CmF":{"name":"F","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2EsA2CmF":{"name":"Es","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3GbbA2CmF":{"name":"Gbb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2GbA2CmF":{"name":"Gb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2FsA2CmF":{"name":"Fs","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2ExA2CmF":{"name":"Ex","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO1GA2CmF":{"name":"G","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2FxA2CmF":{"name":"Fx","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3AbbA2CmF":{"name":"Abb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2AbA2CmF":{"name":"Ab","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2GsA2CmF":{"name":"Gs","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3FsxA2CmF":{"name":"Fsx","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO1AA2CmF":{"name":"A","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2GxA2CmF":{"name":"Gx","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3BbbA2CmF":{"name":"Bbb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2BbA2CmF":{"name":"Bb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2AsA2CmF":{"name":"As","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3GsxA2CmF":{"name":"Gsx","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO1BA2CmF":{"name":"B","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2AxA2CmF":{"name":"Ax","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2CbA2CmF":{"name":"Cb","abstract":"<p>Undocumented</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterOACSgSScfc":{"name":"init(_:)","abstract":"<p>Initialize a PitchLetter instance from a string describing it. E.g. PitchLetter(<q>C#</q>).</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO2PCSiv":{"name":"PC","abstract":"<p>The pitch class value of a PitchLetter case instance.</p>","parent_name":"PitchLetter"},"Enums/PitchLetter.html#/s:11MusicianKit11PitchLetterO3alls10DictionaryVySSACGvZ":{"name":"all","abstract":"<p>A dictionary to map strings to PitchLetter cases.</p>","parent_name":"PitchLetter"},"Enums/KeyType.html#/s:11MusicianKit7KeyTypeO5majorA2CmF":{"name":"major","abstract":"<p>Undocumented</p>","parent_name":"KeyType"},"Enums/KeyType.html#/s:11MusicianKit7KeyTypeO5minorA2CmF":{"name":"minor","abstract":"<p>Undocumented</p>","parent_name":"KeyType"},"Enums/KeyType.html#/s:11MusicianKit7KeyTypeO7patternSaySiGv":{"name":"pattern","abstract":"<p>Semitonal offset pattern from 0 for the current instance.</p>","parent_name":"KeyType"},"Enums/KeyType.html":{"name":"KeyType","abstract":"<p>The <strong>KeyType</strong> enum distinguishes between major and minor keys and produces scale patterns for each.</p>"},"Enums/PitchLetter.html":{"name":"PitchLetter","abstract":"<p>The <strong>PitchLetter</strong> type is an enum whose raw value is the pitch class. The convention used is Cs for C-sharp, and Eb for E-flat, etc. Note that these are octave-invariant abstractions, like pitch-classes but for more tonal contexts.</p>"},"Enums/MatrixForm.html":{"name":"MatrixForm","abstract":"<p>MatrixForm** is an enum to help navigate ToneMatrix objects. The four forms available are p, i, r, and ri, corresponding to Prime, Inversion, Retrograde, and Retrograde-Inversion respectively.</p>"},"Enums/NoteValue.html":{"name":"NoteValue","abstract":"<p>The <strong>NoteValue</strong> enum type, with a Double rawValue, consists of scaling factors for use as standard durations. Plugged into the equation as described below, they will yield approx. durations (in seconds).</p>"},"Enums/Transformation.html":{"name":"Transformation","abstract":"<p>The <strong>Transformation</strong> enum identifies types of neo-riemannian transformations. Available transformations: P, R, L, N, S, H.</p>"},"Enums/ChordQuality.html":{"name":"ChordQuality","abstract":"<p>The <strong>ChordQuality</strong> enum identifies triadic chord qualities for easy use in transformational contexts.</p>"},"Global Variables.html#/s:11MusicianKit6RNDicts10DictionaryVyS2SGv":{"name":"RNDict","abstract":"<p>A dictionary mapping traditional roman numeral symbols to offset collections (as strings). Used for lookup internally by RomanNumeral.Traditional.</p>"},"Global Variables.html#/s:11MusicianKit9forteDicts10DictionaryVyS2SGv":{"name":"forteDict","abstract":"<p>A dictionary mapping pitch-class sets as strings to Forte code strings. Used for lookup internally by PCSet. &lsquo;A&rsquo; refers to pitch-class 10, and &lsquo;B&rsquo; refers to pitch-class 11.</p>"},"Classes/TransformationalTools.html#/s:11MusicianKit21TransformationalToolsC17relativeFromMajors10DictionaryVyAA11PitchLetterOAHGvZ":{"name":"relativeFromMajor","abstract":"<p>Dictionary mapping roots for the R transformation from major.</p>","parent_name":"TransformationalTools"},"Classes/TransformationalTools.html#/s:11MusicianKit21TransformationalToolsC20leadingToneFromMajors10DictionaryVyAA11PitchLetterOAHGvZ":{"name":"leadingToneFromMajor","abstract":"<p>Dictionary mapping roots for the L transformation from major.</p>","parent_name":"TransformationalTools"},"Classes/TransformationalTools.html#/s:11MusicianKit21TransformationalToolsC9transformAA11PitchLetterO_AA12ChordQualityOtSgAF_AHt_AA14TransformationO2bytFZ":{"name":"transform(_:by:)","abstract":"<p>Perform a standard transformation on some triad represented by a tuplet containing a root and a chord quality. Available transformations are cases in the <strong>Transformation</strong> enum: P, L, R, N, S, H.</p>","parent_name":"TransformationalTools"},"Classes/TransformationalTools.html#/s:11MusicianKit21TransformationalToolsC8parallelAA11PitchLetterO_AA12ChordQualityOtSgAF_AHt_tFZ":{"name":"parallel(_:)","abstract":"<p>Perform a P transformation on some triad represented by a tuplet containing a root and a chord quality.</p>","parent_name":"TransformationalTools"},"Classes/TransformationalTools.html#/s:11MusicianKit21TransformationalToolsC8relativeAA11PitchLetterO_AA12ChordQualityOtSgAF_AHt_tFZ":{"name":"relative(_:)","abstract":"<p>Perform a R transformation on some triad represented by a tuplet containing a root and a chord quality.</p>","parent_name":"TransformationalTools"},"Classes/TransformationalTools.html#/s:11MusicianKit21TransformationalToolsC11leadingToneAA11PitchLetterO_AA12ChordQualityOtSgAF_AHt_tFZ":{"name":"leadingTone(_:)","abstract":"<p>Perform an L transformation on some triad represented by a tuplet containing a root and a chord quality.</p>","parent_name":"TransformationalTools"},"Classes/TransformationalTools.html#/s:11MusicianKit21TransformationalToolsC25checkSingleTransformationAA0G0OSgAA11PitchLetterO_AA12ChordQualityOt4from_AI_AKt2totFZ":{"name":"checkSingleTransformation(from:to:)","abstract":"<p>Attempt to identify a single standard transformational mapping between two triads.</p>","parent_name":"TransformationalTools"},"Classes/Proportional.html#/s:11MusicianKit12ProportionalC11baseSecondsSdv":{"name":"baseSeconds","abstract":"<p>The underlying base absolute-time interval which is scaled.</p>","parent_name":"Proportional"},"Classes/Proportional.html#/s:11MusicianKit12ProportionalCACSd12baseInterval_tcfc":{"name":"init(baseInterval:)","abstract":"<p>Initialize from a base absolute-time interval, also setting the lastInterval property to this interval initially.</p>","parent_name":"Proportional"},"Classes/Proportional.html#/s:11MusicianKit12ProportionalCACSd12baseInterval_Sd13scalingFactortcfc":{"name":"init(baseInterval:scalingFactor:)","abstract":"<p>Initialize from a base absolute-time interval and an initial scaling factor.</p>","parent_name":"Proportional"},"Classes/Proportional.html#/s:11MusicianKit12ProportionalC5scaleS2d2by_tF":{"name":"scale(by:)","abstract":"<p>Rescale the current instance&rsquo;s lastInterval property. Also returns the new absolute-time interval, which can be discarded.</p>","parent_name":"Proportional"},"Classes/Metered.html#/s:11MusicianKit7MeteredC5meterAA13TimeSignatureVSgv":{"name":"meter","abstract":"<p>The underlying meter.</p>","parent_name":"Metered"},"Classes/Metered.html#/s:11MusicianKit7MeteredC13timeSignatureAA04TimeE0VSgv":{"name":"timeSignature","abstract":"<p>A computed property that reflects the meter property, provided for convenience.</p>","parent_name":"Metered"},"Classes/Metered.html#/s:11MusicianKit7MeteredC5tempoAA5TempoVv":{"name":"tempo","abstract":"<p>The underlying tempo.</p>","parent_name":"Metered"},"Classes/Metered.html#/s:11MusicianKit7MeteredC3BPMSdv":{"name":"BPM","abstract":"<p>A computed property that reflects the tempo&rsquo;s beats-per-minute value, provided for convenience.</p>","parent_name":"Metered"},"Classes/Metered.html#/s:11MusicianKit7MeteredC9noteValueAA04NoteE0Ov":{"name":"noteValue","abstract":"<p>A NoteValue instance to easily change duration to another regular metric subdivision.</p>","parent_name":"Metered"},"Classes/Metered.html#/s:11MusicianKit7MeteredCAcA5TempoV07initialD0_AA13TimeSignatureV0E5MeterAA9NoteValueO0eJ0tcfc":{"name":"init(initialTempo:initialMeter:initialValue:)","abstract":"<p>Initialize with a tempo, a meter, and a beat value.</p>","parent_name":"Metered"},"Classes/Duration.html#/s:11MusicianKit8DurationC12lastIntervalSdv":{"name":"lastInterval","abstract":"<p>The most recent absolute-time interval represented by an instance.</p>","parent_name":"Duration"},"Classes/Duration.html#/s:s9EquatableP2eeoiSbx_xtFZ":{"name":"==(_:_:)","parent_name":"Duration"},"Classes/PostTonalTools.html#/s:11MusicianKit14PostTonalToolsC7noteMapSiSgSSFZ":{"name":"noteMap(_:)","abstract":"<p>Map a note name to a pitch-class (0 - 11). Returns nil if a direct mapping cannot be found. E.g. noteMap(<q>F</q>) returns 5.</p>","parent_name":"PostTonalTools"},"Classes/PostTonalTools.html#/s:11MusicianKit14PostTonalToolsC9noteMap24SiSgSSFZ":{"name":"noteMap24(_:)","abstract":"<p>Map a note name to a pitch-class (0 - 23) in 24EDO. Returns nil if a direct mapping cannot be found. Uses &lsquo;+&rsquo; for quarter-tone-sharp, and &lsquo;d&rsquo; for quarter-tone-flat. E.g. noteMap24(<q>Fd</q>) returns 9, noteMap24(<q>G+</q>) returns 15, noteMap24(<q>A</q>) returns 18.</p>","parent_name":"PostTonalTools"},"Classes/XenharmonicTools.html#/s:11MusicianKit16XenharmonicToolsC12midiParseEDOSiSaySdGFZ":{"name":"midiParseEDO(_:)","abstract":"<p>Fit an equal division of an octave/diapason (&gt;= 12) to an array of MIDI-note-number-style Doubles.</p>","parent_name":"XenharmonicTools"},"Classes/XenharmonicTools.html#/s:11MusicianKit16XenharmonicToolsC15EDOGetIncrementSdSiFZ":{"name":"EDOGetIncrement(_:)","abstract":"<p>Get an increment to use as a generator for some equal division of an octave/diapason.</p>","parent_name":"XenharmonicTools"},"Classes/Modes/Minor/Melodic.html#/s:11MusicianKit5ModesC5MinorO7MelodicO5firstA2GmF":{"name":"first","abstract":"<p>Undocumented</p>","parent_name":"Melodic"},"Classes/Modes/Minor/Melodic.html#/s:11MusicianKit5ModesC5MinorO7MelodicO6secondA2GmF":{"name":"second","abstract":"<p>Undocumented</p>","parent_name":"Melodic"},"Classes/Modes/Minor/Melodic.html#/s:11MusicianKit5ModesC5MinorO7MelodicO5thirdA2GmF":{"name":"third","abstract":"<p>Undocumented</p>","parent_name":"Melodic"},"Classes/Modes/Minor/Melodic.html#/s:11MusicianKit5ModesC5MinorO7MelodicO6fourthA2GmF":{"name":"fourth","abstract":"<p>Undocumented</p>","parent_name":"Melodic"},"Classes/Modes/Minor/Melodic.html#/s:11MusicianKit5ModesC5MinorO7MelodicO5fifthA2GmF":{"name":"fifth","abstract":"<p>Undocumented</p>","parent_name":"Melodic"},"Classes/Modes/Minor/Melodic.html#/s:11MusicianKit5ModesC5MinorO7MelodicO5sixthA2GmF":{"name":"sixth","abstract":"<p>Undocumented</p>","parent_name":"Melodic"},"Classes/Modes/Minor/Melodic.html#/s:11MusicianKit5ModesC5MinorO7MelodicO7seventhA2GmF":{"name":"seventh","abstract":"<p>Undocumented</p>","parent_name":"Melodic"},"Classes/Modes/Minor/Melodic.html#/s:11MusicianKit5ModesC5MinorO7MelodicO7offsetsSaySiGv":{"name":"offsets","abstract":"<p>Offsets-from-tonic for the current mode, as an array of Ints.</p>","parent_name":"Melodic"},"Classes/Modes/Minor/Harmonic.html#/s:11MusicianKit5ModesC5MinorO8HarmonicO5firstA2GmF":{"name":"first","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Minor/Harmonic.html#/s:11MusicianKit5ModesC5MinorO8HarmonicO6secondA2GmF":{"name":"second","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Minor/Harmonic.html#/s:11MusicianKit5ModesC5MinorO8HarmonicO5thirdA2GmF":{"name":"third","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Minor/Harmonic.html#/s:11MusicianKit5ModesC5MinorO8HarmonicO6fourthA2GmF":{"name":"fourth","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Minor/Harmonic.html#/s:11MusicianKit5ModesC5MinorO8HarmonicO5fifthA2GmF":{"name":"fifth","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Minor/Harmonic.html#/s:11MusicianKit5ModesC5MinorO8HarmonicO5sixthA2GmF":{"name":"sixth","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Minor/Harmonic.html#/s:11MusicianKit5ModesC5MinorO8HarmonicO7seventhA2GmF":{"name":"seventh","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Minor/Harmonic.html#/s:11MusicianKit5ModesC5MinorO8HarmonicO7offsetsSaySiGv":{"name":"offsets","abstract":"<p>Offsets-from-tonic for the current mode, as an array of Ints.</p>","parent_name":"Harmonic"},"Classes/Modes/Minor/Harmonic.html":{"name":"Harmonic","abstract":"<p>Harmonic minor modes. Accessed by numbered cases, e.g. Modes.Minor.Harmonic.fifth.offsets returns [0, 1, 4, 5, 7, 8, 10]</p>","parent_name":"Minor"},"Classes/Modes/Minor/Melodic.html":{"name":"Melodic","abstract":"<p>Melodic minor modes. Accessed by numbered cases, e.g. Modes.Minor.Melodic.fifth.offsets returns [0, 2, 3, 5, 7, 8, 10].</p>","parent_name":"Minor"},"Classes/Modes/Major/Harmonic.html#/s:11MusicianKit5ModesC5MajorO8HarmonicO5firstA2GmF":{"name":"first","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Major/Harmonic.html#/s:11MusicianKit5ModesC5MajorO8HarmonicO6secondA2GmF":{"name":"second","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Major/Harmonic.html#/s:11MusicianKit5ModesC5MajorO8HarmonicO5thirdA2GmF":{"name":"third","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Major/Harmonic.html#/s:11MusicianKit5ModesC5MajorO8HarmonicO6fourthA2GmF":{"name":"fourth","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Major/Harmonic.html#/s:11MusicianKit5ModesC5MajorO8HarmonicO5fifthA2GmF":{"name":"fifth","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Major/Harmonic.html#/s:11MusicianKit5ModesC5MajorO8HarmonicO5sixthA2GmF":{"name":"sixth","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Major/Harmonic.html#/s:11MusicianKit5ModesC5MajorO8HarmonicO7seventhA2GmF":{"name":"seventh","abstract":"<p>Undocumented</p>","parent_name":"Harmonic"},"Classes/Modes/Major/Harmonic.html#/s:11MusicianKit5ModesC5MajorO8HarmonicO7offsetsSaySiGv":{"name":"offsets","abstract":"<p>Offsets-from-tonic for the current mode, as an array of Ints.</p>","parent_name":"Harmonic"},"Classes/Modes/Major.html#/s:11MusicianKit5ModesC5MajorO6ionianA2EmF":{"name":"ionian","abstract":"<p>Undocumented</p>","parent_name":"Major"},"Classes/Modes/Major.html#/s:11MusicianKit5ModesC5MajorO6dorianA2EmF":{"name":"dorian","abstract":"<p>Undocumented</p>","parent_name":"Major"},"Classes/Modes/Major.html#/s:11MusicianKit5ModesC5MajorO8phrygianA2EmF":{"name":"phrygian","abstract":"<p>Undocumented</p>","parent_name":"Major"},"Classes/Modes/Major.html#/s:11MusicianKit5ModesC5MajorO6lydianA2EmF":{"name":"lydian","abstract":"<p>Undocumented</p>","parent_name":"Major"},"Classes/Modes/Major.html#/s:11MusicianKit5ModesC5MajorO10mixolydianA2EmF":{"name":"mixolydian","abstract":"<p>Undocumented</p>","parent_name":"Major"},"Classes/Modes/Major.html#/s:11MusicianKit5ModesC5MajorO7aeolianA2EmF":{"name":"aeolian","abstract":"<p>Undocumented</p>","parent_name":"Major"},"Classes/Modes/Major.html#/s:11MusicianKit5ModesC5MajorO7locrianA2EmF":{"name":"locrian","abstract":"<p>Undocumented</p>","parent_name":"Major"},"Classes/Modes/Major.html#/s:11MusicianKit5ModesC5MajorO5firstAEvZ":{"name":"first","abstract":"<p>Undocumented</p>","parent_name":"Major"},"Classes/Modes/Major/Harmonic.html":{"name":"Harmonic","abstract":"<p>Harmonic major modes. Accessed by numbered cases, e.g. Modes.Major.Harmonic.fifth.offsets returns [0, 1, 4, 5, 7, 9, 10].</p>","parent_name":"Major"},"Classes/Modes.html#/s:11MusicianKit5ModesC4users10DictionaryVySSAA4ModeVGvZ":{"name":"user","abstract":"<p>A dictionary containing user-defined modes. The key is the mode name.</p>","parent_name":"Modes"},"Classes/Modes.html#/s:11MusicianKit5ModesC11modalRotateSaySiGAE_Si2bytFZ":{"name":"modalRotate(_:by:)","abstract":"<p>Get offsets for an arbitrary mode of a base collection of offsets.</p>","parent_name":"Modes"},"Classes/Modes/Major.html":{"name":"Major","abstract":"<p>Major modes. Can be accessed by their names or numbered instances. E.g. Modes.Major.ionian is the same as Modes.major.first.</p>","parent_name":"Modes"},"Classes/Modes/Minor.html":{"name":"Minor","abstract":"<p>Provides harmonic and melodic minor modes through Minor.Harmonic and Minor.Melodic respectively.</p>","parent_name":"Modes"},"Classes/Modes.html":{"name":"Modes","abstract":"<p>Modes** is an abstract class that deals with standard modal collections as well as cataloguing user-generated scales. E.g. Modes.Major.fourth.offsets gives offsets-from-tonic for the lydian mode as an array of Ints, i.e. [0, 2, 4, 6, 7, 9, 11].</p>"},"Classes/XenharmonicTools.html":{"name":"XenharmonicTools","abstract":"<p>XenharmonicTools** is an abstract class and a toolkit for dealing with tuning systems, and more generally with pitch-spaces, outside 12-ED2.</p>"},"Classes/PostTonalTools.html":{"name":"PostTonalTools","abstract":"<p>PostTonalTools** is an abstract class and a toolkit for dealing with post-tonal music-theoretic and compositional conventions, including musical group theory, tone rows and matrices, etc.</p>"},"Classes/Duration.html":{"name":"Duration","abstract":"<p>Duration** is a simple base-class, not intended to be instantiated directly but to allow the <strong>Metered</strong> and <strong>Proportional</strong> subclasses to operate interchangeably in some contexts.</p>"},"Classes/Metered.html":{"name":"Metered","abstract":"<p>Metered** is a subclass of <strong>Duration</strong> that acts as an abstraction for a duration that has some metric context. The <em>lastInterval</em> property reflects the most recent absolute-time interval represented by an instance.</p>"},"Classes/Proportional.html":{"name":"Proportional","abstract":"<p>Proportional** is a subclass of <strong>Duration</strong> that acts as an abstraction for a duration that is proportional to some base absolute-time interval. The <em>lastInterval</em> property reflects the most recent absolute-time interval represented by an instance.</p>"},"Classes/TransformationalTools.html":{"name":"TransformationalTools","abstract":"<p>TransformationalTools** is an abstract class and a toolkit for dealing with neo-riemannian and transformational ideas in musical composition and analysis.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Global Variables.html":{"name":"Global Variables","abstract":"<p>The following global variables are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}